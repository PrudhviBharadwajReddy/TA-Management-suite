IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Users]') AND type in (N'U'))
CREATE TABLE Users (
    UserID NVARCHAR(10) PRIMARY KEY,
    Password NVARCHAR(255) NOT NULL,
    Email NVARCHAR(100) NOT NULL UNIQUE,
    Role NVARCHAR(50) NOT NULL
);



IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Courses]') AND type in (N'U'))
CREATE TABLE Courses (
    CourseID NVARCHAR(10) PRIMARY KEY,
    CourseName NVARCHAR(50) NOT NULL,
    Description NVARCHAR(MAX),
    InstructorID NVARCHAR(10),
    NumTARequired INT,
    SkillsRequired NVARCHAR(MAX),
    FOREIGN KEY (InstructorID) REFERENCES Users(UserID)
);


IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[TAExperience]') AND type in (N'U'))
CREATE TABLE TAExperience (
    ExperienceID INT IDENTITY(1,1) PRIMARY KEY,
    StudentID NVARCHAR(10) NOT NULL,
    CourseID NVARCHAR(10) NOT NULL,
    CourseName NVARCHAR(100),
    Institution NVARCHAR(100),
    StartDate DATE,
    EndDate DATE,
    FOREIGN KEY (StudentID) REFERENCES Users(UserID),
    FOREIGN KEY (CourseID) REFERENCES Courses(CourseID)
);


IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CourseAssignments]') AND type in (N'U'))
CREATE TABLE CourseAssignments (
    AssignmentID INT IDENTITY(1,1) PRIMARY KEY,
    CourseID NVARCHAR(10) NOT NULL,
    StudentID NVARCHAR(10) NOT NULL,
    InstructorID NVARCHAR(10),
    Term NVARCHAR(20),
    Year INT,
    FOREIGN KEY (CourseID) REFERENCES Courses(CourseID),
    FOREIGN KEY (StudentID) REFERENCES Users(UserID),
    FOREIGN KEY (InstructorID) REFERENCES Users(UserID)
);


IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[TAReviews]') AND type in (N'U'))
CREATE TABLE TAReviews (
    ReviewID INT IDENTITY(1,1) PRIMARY KEY,
    StudentID NVARCHAR(10) NOT NULL,
    CourseID NVARCHAR(10) NOT NULL,
    InstructorID NVARCHAR(10) NOT NULL,
    Rating INT,
    Status NVARCHAR(50) CHECK (Status IN ('Submitted', 'Under Review', 'Decision Made')),
    Comments NVARCHAR(MAX),
    DateOfStatusUpdation DATETIME,
    FOREIGN KEY (StudentID) REFERENCES Users(UserID),
    FOREIGN KEY (CourseID) REFERENCES Courses(CourseID),
    FOREIGN KEY (InstructorID) REFERENCES Users(UserID)
);


IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Instructors]') AND type in (N'U'))
CREATE TABLE Instructors (
    InstructorID NVARCHAR(10) PRIMARY KEY,
    InstructorName NVARCHAR(100),
    CourseID NVARCHAR(10),
    CourseName NVARCHAR(50),
    FOREIGN KEY (CourseID) REFERENCES Courses(CourseID)
);


IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[TAPerformanceAssessment]') AND type in (N'U'))
CREATE TABLE TAPerformanceAssessment (
    AssessmentID INT IDENTITY(1,1) PRIMARY KEY,
    StudentID NVARCHAR(10) NOT NULL,
    CourseID NVARCHAR(10) NOT NULL,
    InstructorID NVARCHAR(10) NOT NULL,
    Rating INT,
    Comments NVARCHAR(MAX),
    FOREIGN KEY (StudentID) REFERENCES Users(UserID),
    FOREIGN KEY (CourseID) REFERENCES Courses(CourseID),
    FOREIGN KEY (InstructorID) REFERENCES Instructors(InstructorID)
);




IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[TAApplicantProfile]') AND type in (N'U'))
CREATE TABLE TAApplicantProfile (
    UserProfileID INT IDENTITY(1,1) PRIMARY KEY,
    StudentID NVARCHAR(10) NOT NULL,
    FirstName NVARCHAR(50) NOT NULL,
    LastName NVARCHAR(50) NOT NULL,
    Email NVARCHAR(50) NOT NULL,
    ContactNumber NVARCHAR(15),
    Address NVARCHAR(255),
    CGPA FLOAT CHECK (CGPA <= 4),
    AdditionalInformation NVARCHAR(MAX),
    FOREIGN KEY (StudentID) REFERENCES Users(UserID)
);



IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[TAApplications]') AND type in (N'U'))
CREATE TABLE TAApplications (
    ApplicationID INT IDENTITY(1,1) PRIMARY KEY,
    StudentID NVARCHAR(10) NOT NULL,
    CourseID NVARCHAR(10) NOT NULL,
    CV NVARCHAR(MAX),
    Skills NVARCHAR(MAX),
    Status NVARCHAR(50) NOT NULL,
    Experience INT,
    SubmissionDate DATETIME NOT NULL,
    FOREIGN KEY (StudentID) REFERENCES Users(UserID),
    FOREIGN KEY (CourseID) REFERENCES Courses(CourseID)
);